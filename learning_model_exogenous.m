function [lmpy] =...
        learning_model_exogenous(...
        learning_rates,...
        capacity_forecast,...
        capacity_additions,...
        Periods,Year,num_tech)

learning_coefficient =...
log(1-learning_rates)/log(2);
existing_capacity_matrix =...
repmat(capacity_forecast(:,1)...
-capacity_additions(:,1),1,Periods);
% existing_capacity_matrix =...
% repmat(existing_capacity,1,Periods);
% lmpp = learning multipliers per period
lmpp =...
(capacity_forecast(:,1:Periods)...
./existing_capacity_matrix)...
.^repmat(learning_coefficient,1,Periods); %2016$/Kw

% Extrapolating values
years_interpolated = Year:(Year)+(Periods*5);
years_interpolated([1 5:5:(Periods)*5]) = [];
years_interpolated(end) = [];
% lmpy = learning multipliers per year
lmpy = zeros(num_tech,Periods*5);
lmpy(:,5:5:(Periods)*5) = lmpp;
% to include the starting year
years_with_data = [Year Year+4:5:(Periods)*5+(Year)]; 
lmpy(:,1) = 1;
for j=1:num_tech
    lmpy(j,(lmpy(j,:)==0)) =...
        interp1(...
            years_with_data,...
            [1 lmpp(j,:)],...
            years_interpolated,...
            'linear');
end